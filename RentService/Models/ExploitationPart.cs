using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;

namespace RentService.Models.VehicleModule
{
    public class ExploitationPart
    {
        public ExploitationPart()
        {
            RepairParts = new List<RepairExploitationPart>();
        }
        
        public int ID { get; set; }

        [Required(ErrorMessage = "ID pojazdu jest wymagane")]
        public int VehicleID { get; set; }

        // Właściwość nawigacyjna - nie walidowana
        [NotMapped]
        [ValidateNever]
        public Vehicle Car { get; set; }

        [Required(ErrorMessage = "Typ części jest wymagany")]
        [EnumDataType(typeof(PartType), ErrorMessage = "Wybierz prawidłowy typ części")]
        public PartType PartType { get; set; }

        [Required(ErrorMessage = "Nazwa części jest wymagana")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "Nazwa części musi mieć od 2 do 100 znaków")]
        public string PartName { get; set; }

        [Required(ErrorMessage = "Całkowity przebieg jest wymagany")]
        [Range(1, 1000000, ErrorMessage = "Całkowity przebieg musi być między 1 a 1,000,000 km")]
        public int TotalKm { get; set; }

        [Required(ErrorMessage = "Aktualny przebieg jest wymagany")]
        [Range(0, int.MaxValue, ErrorMessage = "Aktualny przebieg nie może być ujemny")]
        [CurrentKmValidation(ErrorMessage = "Aktualny przebieg nie może być większy niż całkowity przebieg")]
        public int CurrentKm { get; set; }

        [Required(ErrorMessage = "Data ostatniej wymiany jest wymagana")]
        [DataType(DataType.Date)]
        [MaxDate(ErrorMessage = "Data ostatniej wymiany nie może być z przyszłości")]
        public DateTime LastReplacementDate { get; set; }

        [Required(ErrorMessage = "Data planowanej wymiany jest wymagana")]
        [DataType(DataType.Date)]
        [DateGreaterThan("LastReplacementDate", ErrorMessage = "Data planowanej wymiany musi być późniejsza niż data ostatniej wymiany")]
        public DateTime NextReplacementDueDate { get; set; }

        [Required(ErrorMessage = "Stan części jest wymagany")]
        [EnumDataType(typeof(Condition), ErrorMessage = "Wybierz prawidłowy stan części")]
        public Condition PartCondition { get; set; }

        [StringLength(500, ErrorMessage = "Uwagi nie mogą przekraczać 500 znaków")]
        public string? Notes { get; set; }
        
        public ICollection<RepairExploitationPart> RepairParts { get; set; }
    }

    public enum PartType
    {
        Suspension,
        Tires,
        Oil,
        Brakes,
        Battery,
        Filters,
        Belts,
        Other
    }

    public enum Condition
    {
        New,
        Good,
        Worn,
        Damaged,
        Replaced
    }

    // Niestandardowe atrybuty walidacji
    public class MaxDateAttribute : ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            if (value is DateTime dateTime)
            {
                return dateTime.Date <= DateTime.Now.Date;
            }
            return true;
        }
    }

    public class DateGreaterThanAttribute : ValidationAttribute
    {
        private readonly string _comparisonProperty;

        public DateGreaterThanAttribute(string comparisonProperty)
        {
            _comparisonProperty = comparisonProperty;
        }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var currentValue = (DateTime?)value;
            var property = validationContext.ObjectType.GetProperty(_comparisonProperty);

            if (property == null)
                throw new ArgumentException("Property with this name not found");

            var comparisonValue = (DateTime?)property.GetValue(validationContext.ObjectInstance);

            if (currentValue.HasValue && comparisonValue.HasValue)
            {
                if (currentValue <= comparisonValue)
                {
                    return new ValidationResult(ErrorMessage ?? $"Wartość musi być późniejsza niż {_comparisonProperty}");
                }
            }

            return ValidationResult.Success;
        }
    }

    public class CurrentKmValidationAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var model = (ExploitationPart)validationContext.ObjectInstance;

            if (model.CurrentKm > model.TotalKm)
            {
                return new ValidationResult(ErrorMessage ?? "Aktualny przebieg nie może być większy niż całkowity przebieg części");
            }

            return ValidationResult.Success;
        }
    }
}