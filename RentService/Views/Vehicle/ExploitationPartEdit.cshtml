@{
ViewData["Title"] = "Edytuj część eksploatacyjną";
Layout = "_Layout";
}

@model RentService.Models.VehicleModule.ExploitationPart

@section Head {
<style>
    .form-container {
        max-width: 800px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #e5e7eb;
    }

    .form-input, .form-select, .form-textarea {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: #1f2937;
        border: 1px solid #374151;
        border-radius: 0.5rem;
        color: #ffffff;
        font-size: 1rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-input:focus, .form-select:focus, .form-textarea:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-input.is-invalid, .form-select.is-invalid, .form-textarea.is-invalid {
        border-color: #ef4444;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
    }

    .form-textarea {
        resize: vertical;
        min-height: 100px;
    }

    .form-error {
        color: #ef4444;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .form-help {
        color: #9ca3af;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .required::after {
        content: " *";
        color: #ef4444;
    }

    .form-section {
        background-color: #1f2937;
        border: 1px solid #374151;
        border-radius: 0.75rem;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .form-section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #ffffff;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #374151;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }

    .form-grid-full {
        grid-column: 1 / -1;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        padding-top: 2rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        font-size: 1rem;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background-color: #3b82f6;
        color: #ffffff;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #2563eb;
    }

    .btn-secondary {
        background-color: #6b7280;
        color: #ffffff;
    }

    .btn-secondary:hover {
        background-color: #4b5563;
    }

    .btn-danger {
        background-color: #ef4444;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #dc2626;
    }

    .km-input-container {
        position: relative;
    }

    .km-input-container::after {
        content: "km";
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #9ca3af;
        pointer-events: none;
    }

    .validation-summary {
        background-color: #fef2f2;
        border: 1px solid #fecaca;
        color: #dc2626;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .validation-summary ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .validation-summary li {
        margin-bottom: 0.25rem;
    }

    .vehicle-info {
        background-color: #111827;
        border: 1px solid #374151;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .vehicle-info h3 {
        color: #ffffff;
        margin: 0 0 0.5rem 0;
        font-size: 1.125rem;
        font-weight: 600;
    }

    .vehicle-info p {
        color: #9ca3af;
        margin: 0;
        font-size: 0.875rem;
    }

    .condition-badges {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        margin-top: 0.5rem;
    }

    .condition-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .condition-new { background-color: rgba(5, 150, 105, 0.1); color: #10b981; border: 1px solid rgba(5, 150, 105, 0.2); }
    .condition-good { background-color: rgba(34, 197, 94, 0.1); color: #22c55e; border: 1px solid rgba(34, 197, 94, 0.2); }
    .condition-worn { background-color: rgba(251, 191, 36, 0.1); color: #fbbf24; border: 1px solid rgba(251, 191, 36, 0.2); }
    .condition-damaged { background-color: rgba(239, 68, 68, 0.1); color: #ef4444; border: 1px solid rgba(239, 68, 68, 0.2); }
    .condition-replaced { background-color: rgba(168, 85, 247, 0.1); color: #a855f7; border: 1px solid rgba(168, 85, 247, 0.2); }

    .alert {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .alert-success {
        background-color: rgba(5, 150, 105, 0.1);
        border: 1px solid rgba(5, 150, 105, 0.2);
        color: #10b981;
    }

    .alert-error {
        background-color: rgba(220, 38, 38, 0.1);
        border: 1px solid rgba(220, 38, 38, 0.2);
        color: #ef4444;
    }

    .part-info {
        background-color: #0f172a;
        border: 1px solid #334155;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .part-info h3 {
        color: #ffffff;
        margin: 0 0 0.5rem 0;
        font-size: 1.125rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .part-info p {
        color: #9ca3af;
        margin: 0.25rem 0;
        font-size: 0.875rem;
    }

    .progress-bar {
        background-color: #374151;
        border-radius: 0.5rem;
        height: 0.5rem;
        overflow: hidden;
        margin-top: 0.5rem;
    }

    .progress-fill {
        height: 100%;
        transition: width 0.3s ease;
    }

    .progress-good { background-color: #10b981; }
    .progress-warning { background-color: #f59e0b; }
    .progress-danger { background-color: #ef4444; }

    .delete-section {
        background-color: rgba(239, 68, 68, 0.05);
        border: 1px solid rgba(239, 68, 68, 0.2);
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin-top: 2rem;
    }

    .delete-section h3 {
        color: #ef4444;
        margin: 0 0 1rem 0;
        font-size: 1.125rem;
        font-weight: 600;
    }

    .delete-section p {
        color: #9ca3af;
        margin: 0 0 1rem 0;
        font-size: 0.875rem;
    }

    @@media (max-width: 768px) {
        .form-grid {
            grid-template-columns: 1fr;
        }

        .form-actions {
            justify-content: center;
            flex-direction: column;
        }

        .btn {
            min-width: 120px;
        }
    }
</style>
}

<div class="flex h-screen overflow-hidden -mx-4 -my-8">

    @await Html.PartialAsync("_Sidebar")

    <!-- Main Content -->
    <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Top Bar -->
        <header class="bg-gray-800 shadow-sm border-b border-gray-700 px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <button id="toggle-sidebar" class="text-gray-400 hover:text-white focus:outline-none">
                        <i class="fas fa-bars text-xl"></i>
                    </button>
                    <nav class="ml-4 flex items-center space-x-2 text-sm text-gray-400">
                        <a href="@Url.Action("Index", "Vehicle")" class="hover:text-white transition-colors">
                            <i class="fas fa-car mr-1"></i>
                            Pojazdy
                        </a>
                        <i class="fas fa-chevron-right text-xs"></i>
                        <a href="@Url.Action("VehicleDetail", "Vehicle", new { id = Model.VehicleID })" class="hover:text-white transition-colors">
                            @(Model.Car?.Model ?? "Pojazd")
                        </a>
                        <i class="fas fa-chevron-right text-xs"></i>
                        <span class="text-white">Edytuj część eksploatacyjną</span>
                    </nav>
                </div>
                <div class="flex items-center space-x-4">
                    <button class="text-gray-400 hover:text-white relative">
                        <i class="fas fa-bell text-xl"></i>
                        <span class="absolute -top-1 -right-1 px-1.5 py-0.5 text-xs bg-red-500 text-white rounded-full">3</span>
                    </button>
                </div>
            </div>
        </header>

        <!-- Main Content Area -->
        <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-900 p-6">
            <div class="form-container">

                <!-- Success/Error Messages -->
                @if (TempData["SuccessMessage"] != null)
                {
                <div class="alert alert-success">
                    <i class="fas fa-check-circle mr-2"></i>
                    @TempData["SuccessMessage"]
                </div>
                }

                @if (TempData["ErrorMessage"] != null)
                {
                <div class="alert alert-error">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    @TempData["ErrorMessage"]
                </div>
                }

                <!-- Page Header -->
                <div class="mb-8">
                    <h1 class="text-3xl font-bold text-white mb-2">Edytuj część eksploatacyjną</h1>
                    <p class="text-gray-400">Zmodyfikuj dane części eksploatacyjnej</p>
                </div>

                <!-- Vehicle Information -->
                @if (Model.Car != null)
                {
                <div class="vehicle-info">
                    <h3>
                        <i class="fas fa-car mr-2"></i>
                        @Model.Car.Model
                    </h3>
                    <p>Numer rejestracyjny: @Model.Car.RegistrationNumber | Przebieg: @Model.Car.Mileage.ToString("N0") km</p>
                </div>
                }

                <!-- Current Part Information -->
                <div class="part-info">
                    <h3>
                        <i class="fas fa-cog mr-2"></i>
                        @Model.PartName
                        @{
                        var conditionClass = Model.PartCondition switch {
                        RentService.Models.VehicleModule.Condition.New => "condition-new",
                        RentService.Models.VehicleModule.Condition.Good => "condition-good",
                        RentService.Models.VehicleModule.Condition.Worn => "condition-worn",
                        RentService.Models.VehicleModule.Condition.Damaged => "condition-damaged",
                        RentService.Models.VehicleModule.Condition.Replaced => "condition-replaced",
                        _ => ""
                        };

                        var conditionText = Model.PartCondition switch {
                        RentService.Models.VehicleModule.Condition.New => "Nowa",
                        RentService.Models.VehicleModule.Condition.Good => "Dobra",
                        RentService.Models.VehicleModule.Condition.Worn => "Zużyta",
                        RentService.Models.VehicleModule.Condition.Damaged => "Uszkodzona",
                        RentService.Models.VehicleModule.Condition.Replaced => "Wymieniona",
                        _ => Model.PartCondition.ToString()
                        };

                        var partTypeText = Model.PartType switch {
                        RentService.Models.VehicleModule.PartType.Suspension => "Zawieszenie",
                        RentService.Models.VehicleModule.PartType.Tires => "Opony",
                        RentService.Models.VehicleModule.PartType.Oil => "Olej",
                        RentService.Models.VehicleModule.PartType.Brakes => "Hamulce",
                        RentService.Models.VehicleModule.PartType.Battery => "Akumulator",
                        RentService.Models.VehicleModule.PartType.Filters => "Filtry",
                        RentService.Models.VehicleModule.PartType.Belts => "Paski",
                        RentService.Models.VehicleModule.PartType.Other => "Inne",
                        _ => Model.PartType.ToString()
                        };
                        }
                        <span class="condition-badge @conditionClass">@conditionText</span>
                    </h3>
                    <p>Typ: @partTypeText | ID: #@Model.ID</p>
                    <p id="part-progress-info">Przebieg: @Model.CurrentKm.ToString("N0") / @Model.TotalKm.ToString("N0") km
                        (@((double)Model.CurrentKm / Model.TotalKm * 100).ToString("F1")%)</p>

                    @{
                    var progressPercentage = (double)Model.CurrentKm / Model.TotalKm * 100;
                    var progressClass = progressPercentage < 70 ? "progress-good" : progressPercentage < 90 ? "progress-warning" : "progress-danger";
                    }
                    <div class="progress-bar">
                        <div class="progress-fill @progressClass" style="width: @(Math.Min(progressPercentage, 100))%" id="progress-bar-fill"></div>
                    </div>
                </div>

                <!-- Validation Summary -->
                @Html.ValidationSummary(false, "", new { @class = "validation-summary" })

                <!-- Form -->
                @using (Html.BeginForm("ExploitationPartEdit", "Vehicle", FormMethod.Post, new { @class = "space-y-6" }))
                {
                @Html.AntiForgeryToken()

                <!-- Hidden fields -->
                @Html.HiddenFor(m => m.ID)
                @Html.HiddenFor(m => m.VehicleID)

                <!-- Basic Information Section -->
                <div class="form-section">
                    <h2 class="form-section-title">
                        <i class="fas fa-info-circle mr-2"></i>
                        Podstawowe informacje
                    </h2>

                    <div class="form-grid">
                        <div class="form-group">
                            @Html.LabelFor(m => m.PartType, new { @class = "form-label required" })
                            @Html.DropDownListFor(m => m.PartType, new List<SelectListItem>
                            {
                            new SelectListItem { Text = "Zawieszenie", Value = "Suspension", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Suspension },
                            new SelectListItem { Text = "Opony", Value = "Tires", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Tires },
                            new SelectListItem { Text = "Olej", Value = "Oil", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Oil },
                            new SelectListItem { Text = "Hamulce", Value = "Brakes", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Brakes },
                            new SelectListItem { Text = "Akumulator", Value = "Battery", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Battery },
                            new SelectListItem { Text = "Filtry", Value = "Filters", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Filters },
                            new SelectListItem { Text = "Paski", Value = "Belts", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Belts },
                            new SelectListItem { Text = "Inne", Value = "Other", Selected = Model.PartType == RentService.Models.VehicleModule.PartType.Other }
                            }, new { @class = "form-select", id = "PartType" })
                            @Html.ValidationMessageFor(m => m.PartType, "", new { @class = "form-error" })
                            <div class="form-help">Wybierz kategorię części eksploatacyjnej</div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.PartName, new { @class = "form-label required" })
                            @Html.TextBoxFor(m => m.PartName, new { @class = "form-input", placeholder = "np. Olej silnikowy 5W-30", maxlength = "100", id = "PartName" })
                            @Html.ValidationMessageFor(m => m.PartName, "", new { @class = "form-error" })
                            <div class="form-help">Szczegółowa nazwa części lub produktu</div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.PartCondition, new { @class = "form-label required" })
                            @Html.DropDownListFor(m => m.PartCondition, new List<SelectListItem>
                            {
                            new SelectListItem { Text = "Nowa", Value = "New", Selected = Model.PartCondition == RentService.Models.VehicleModule.Condition.New },
                            new SelectListItem { Text = "Dobra", Value = "Good", Selected = Model.PartCondition == RentService.Models.VehicleModule.Condition.Good },
                            new SelectListItem { Text = "Zużyta", Value = "Worn", Selected = Model.PartCondition == RentService.Models.VehicleModule.Condition.Worn },
                            new SelectListItem { Text = "Uszkodzona", Value = "Damaged", Selected = Model.PartCondition == RentService.Models.VehicleModule.Condition.Damaged },
                            new SelectListItem { Text = "Wymieniona", Value = "Replaced", Selected = Model.PartCondition == RentService.Models.VehicleModule.Condition.Replaced }
                            }, new { @class = "form-select" })
                            @Html.ValidationMessageFor(m => m.PartCondition, "", new { @class = "form-error" })
                            <div class="condition-badges">
                                <span class="condition-badge condition-new">Nowa</span>
                                <span class="condition-badge condition-good">Dobra</span>
                                <span class="condition-badge condition-worn">Zużyta</span>
                                <span class="condition-badge condition-damaged">Uszkodzona</span>
                                <span class="condition-badge condition-replaced">Wymieniona</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Mileage Information Section -->
                <div class="form-section">
                    <h2 class="form-section-title">
                        <i class="fas fa-tachometer-alt mr-2"></i>
                        Informacje o przebiegu
                    </h2>

                    <div class="form-grid">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalKm, new { @class = "form-label required" })
                            <div class="km-input-container">
                                @Html.TextBoxFor(m => m.TotalKm, new { @class = "form-input", @type = "number", min = "1", max = "1000000", step = "1", id = "TotalKm" })
                            </div>
                            @Html.ValidationMessageFor(m => m.TotalKm, "", new { @class = "form-error" })
                            <div class="form-help">Ile kilometrów część może przepracować łącznie</div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrentKm, new { @class = "form-label required" })
                            <div class="km-input-container">
                                @Html.TextBoxFor(m => m.CurrentKm, new { @class = "form-input", @type = "number", min = "0", step = "1", id = "CurrentKm" })
                            </div>
                            @Html.ValidationMessageFor(m => m.CurrentKm, "", new { @class = "form-error" })
                            <div class="form-help">Ile kilometrów część już przepracowała</div>
                        </div>
                    </div>
                </div>

                <!-- Maintenance Information Section -->
                <div class="form-section">
                    <h2 class="form-section-title">
                        <i class="fas fa-calendar-alt mr-2"></i>
                        Informacje o konserwacji
                    </h2>

                    <div class="form-grid">
                        <div class="form-group">
                            @Html.LabelFor(m => m.LastReplacementDate, new { @class = "form-label required" })
                            @Html.TextBoxFor(m => m.LastReplacementDate, "{0:yyyy-MM-dd}", new { @class = "form-input", @type = "date", max = DateTime.Now.ToString("yyyy-MM-dd"), id = "LastReplacementDate" })
                            @Html.ValidationMessageFor(m => m.LastReplacementDate, "", new { @class = "form-error" })
                            <div class="form-help">Kiedy część została ostatnio wymieniona</div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.NextReplacementDueDate, new { @class = "form-label required" })
                            @Html.TextBoxFor(m => m.NextReplacementDueDate, "{0:yyyy-MM-dd}", new { @class = "form-input", @type = "date", min = DateTime.Now.ToString("yyyy-MM-dd"), id = "NextReplacementDueDate" })
                            @Html.ValidationMessageFor(m => m.NextReplacementDueDate, "", new { @class = "form-error" })
                            <div class="form-help">Kiedy część powinna zostać wymieniona</div>
                        </div>

                        <div class="form-group form-grid-full">
                            @Html.LabelFor(m => m.Notes, new { @class = "form-label" })
                            @Html.TextAreaFor(m => m.Notes, new { @class = "form-textarea", placeholder = "Dodatkowe informacje o części, producent, numer katalogowy...", maxlength = "500", id = "Notes" })
                            @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "form-error" })
                            <div class="form-help" id="notes-counter">Opcjonalne uwagi dotyczące części (pozostało 500 znaków)</div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <a href="@Url.Action("VehicleDetail", "Vehicle", new { id = Model.VehicleID })" class="btn btn-secondary">
                        <i class="fas fa-times mr-2"></i>
                        Anuluj
                    </a>
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-save mr-2"></i>
                        Zapisz zmiany
                    </button>
                </div>
                }

                <!-- Delete Section -->
                <div class="delete-section">
                    <h3>
                        <i class="fas fa-trash mr-2"></i>
                        Usuń część eksploatacyjną
                    </h3>
                    <p>Uwaga: Ta operacja jest nieodwracalna. Wszystkie dane związane z tą częścią zostaną trwale usunięte.</p>

                    @using (Html.BeginForm("ExploitationPartDelete", "Vehicle", FormMethod.Post, new { @class = "inline", id = "deleteForm" }))
                    {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("id", Model.ID)
                    @Html.Hidden("vehicleId", Model.VehicleID)

                    <button type="button" class="btn btn-danger" id="deleteBtn">
                        <i class="fas fa-trash mr-2"></i>
                        Usuń część
                    </button>
                    }
                </div>

            </div>
        </main>
    </div>
</div>

@section Scripts {
<script>
    // Sidebar toggle functionality
    const sidebar = document.getElementById('sidebar');
    const toggleBtn = document.getElementById('toggle-sidebar');
    const logoText = document.getElementById('logo-text');
    const userInfo = document.getElementById('user-info');
    const navTexts = document.querySelectorAll('.nav-text');

    if (toggleBtn && sidebar) {
        toggleBtn.addEventListener('click', () => {
            sidebar.classList.toggle('sidebar-collapsed');

            if (sidebar.classList.contains('sidebar-collapsed')) {
                if (logoText) logoText.style.display = 'none';
                if (userInfo) userInfo.style.display = 'none';
                navTexts.forEach(text => text.style.display = 'none');
            } else {
                if (logoText) logoText.style.display = 'block';
                if (userInfo) userInfo.style.display = 'block';
                navTexts.forEach(text => text.style.display = 'block');
            }
        });
    }

    // Part type change handler - suggest defaults but don't override existing values
    const partTypeSelect = document.getElementById('PartType');
    const partNameInput = document.getElementById('PartName');
    const totalKmInput = document.getElementById('TotalKm');
    const lastDateInput = document.getElementById('LastReplacementDate');
    const nextDateInput = document.getElementById('NextReplacementDueDate');

    if (partTypeSelect) {
        partTypeSelect.addEventListener('change', function() {
            const partType = this.value;

            if (partType && partType !== '' && confirm('Czy chcesz zaktualizować domyślne wartości na podstawie wybranego typu części?')) {
                // Fetch defaults via AJAX
                fetch(`@Url.Action("GetPartDefaults", "Vehicle")?partType=${partType}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Suggest new part name
                            if (data.partName && confirm(`Zmienić nazwę części na "${data.partName}"?`)) {
                                partNameInput.value = data.partName;
                            }

                            // Suggest new total km
                            if (data.totalKm && confirm(`Zmienić całkowity przebieg na ${data.totalKm} km?`)) {
                                totalKmInput.value = data.totalKm;
                                updateProgressBar();
                            }

                            // Update next replacement date based on interval
                            if (lastDateInput.value && data.intervalMonths && confirm('Przeliczyć datę następnej wymiany na podstawie nowego typu części?')) {
                                const lastDate = new Date(lastDateInput.value);
                                lastDate.setMonth(lastDate.getMonth() + data.intervalMonths);
                                nextDateInput.value = lastDate.toISOString().split('T')[0];
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching part defaults:', error);
                    });
            }
        });
    }

    // Update progress bar when values change
    function updateProgressBar() {
        const currentKm = parseInt(document.getElementById('CurrentKm')?.value || 0);
        const totalKm = parseInt(document.getElementById('TotalKm')?.value || 1);
        const progressPercentage = Math.min((currentKm / totalKm) * 100, 100);

        const progressFill = document.getElementById('progress-bar-fill');
        if (progressFill) {
            progressFill.style.width = progressPercentage + '%';

            // Update progress color based on percentage
            progressFill.className = 'progress-fill ' +
                (progressPercentage < 70 ? 'progress-good' :
                    progressPercentage < 90 ? 'progress-warning' : 'progress-danger');
        }

        // Update percentage display in part info
        const partInfo = document.getElementById('part-progress-info');
        if (partInfo) {
            partInfo.innerHTML = `Przebieg: ${currentKm.toLocaleString()} / ${totalKm.toLocaleString()} km (${progressPercentage.toFixed(1)}%)`;
        }
    }

    // Attach event listeners to update progress bar
    document.getElementById('CurrentKm')?.addEventListener('input', updateProgressBar);
    document.getElementById('TotalKm')?.addEventListener('input', updateProgressBar);

    // Form validation
    document.querySelector('form:not(#deleteForm)').addEventListener('submit', function(e) {
        const requiredFields = document.querySelectorAll('input[required], select[required]');
        let isValid = true;

        // Clear previous custom errors
        document.querySelectorAll('.form-error').forEach(error => {
            if (!error.getAttribute('data-valmsg-for')) {
                error.textContent = '';
            }
        });

        // Remove previous error classes
        document.querySelectorAll('.is-invalid').forEach(field => {
            field.classList.remove('is-invalid');
        });

        // Validate required fields
        requiredFields.forEach(field => {
            if (!field.value || field.value.trim() === '') {
                isValid = false;
                field.classList.add('is-invalid');

                const errorElement = field.closest('.form-group').querySelector('.form-error');
                if (errorElement && !errorElement.getAttribute('data-valmsg-for')) {
                    errorElement.textContent = 'To pole jest wymagane';
                }
            }
        });

        // Validate TotalKm vs CurrentKm
        const totalKm = parseInt(totalKmInput?.value || 0);
        const currentKm = parseInt(document.getElementById('CurrentKm')?.value || 0);

        if (currentKm > totalKm) {
            isValid = false;
            const currentKmField = document.getElementById('CurrentKm');
            currentKmField.classList.add('is-invalid');

            const errorElement = currentKmField.closest('.form-group').querySelector('.form-error');
            if (errorElement && !errorElement.getAttribute('data-valmsg-for')) {
                errorElement.textContent = 'Aktualny przebieg nie może być większy niż całkowity przebieg';
            }
        }

        // Validate dates
        const lastDate = new Date(lastDateInput?.value);
        const nextDate = new Date(nextDateInput?.value);

        if (lastDate && nextDate && nextDate <= lastDate) {
            isValid = false;
            nextDateInput.classList.add('is-invalid');

            const errorElement = nextDateInput.closest('.form-group').querySelector('.form-error');
            if (errorElement && !errorElement.getAttribute('data-valmsg-for')) {
                errorElement.textContent = 'Data planowanej wymiany musi być późniejsza niż data ostatniej wymiany';
            }
        }

        if (!isValid) {
            e.preventDefault();
            // Scroll to first error
            const firstError = document.querySelector('.is-invalid');
            if (firstError) {
                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                firstError.focus();
            }
        } else {
            // Show loading state
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Zapisywanie...';
            submitBtn.disabled = true;
        }
    });

    // Delete confirmation
    document.getElementById('deleteBtn')?.addEventListener('click', function() {
       

        if (confirm(`Czy na pewno chcesz usunąć część "${partName}" z pojazdu ${vehicleModel}?\n\nTa operacja jest nieodwracalna!`)) {
            document.getElementById('deleteForm').submit();
        }
    });

    // Real-time validation feedback
    document.querySelectorAll('.form-input, .form-select').forEach(input => {
        input.addEventListener('blur', function() {
            if (this.hasAttribute('required') && (!this.value || this.value.trim() === '')) {
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-invalid');
                const errorElement = this.closest('.form-group').querySelector('.form-error');
                if (errorElement && !errorElement.getAttribute('data-valmsg-for')) {
                    errorElement.textContent = '';
                }
            }
        });

        input.addEventListener('input', function() {
            if (this.classList.contains('is-invalid') && this.value && this.value.trim() !== '') {
                this.classList.remove('is-invalid');
                const errorElement = this.closest('.form-group').querySelector('.form-error');
                if (errorElement && !errorElement.getAttribute('data-valmsg-for')) {
                    errorElement.textContent = '';
                }
            }
        });
    });

    // Character counter for notes
    const notesTextarea = document.getElementById('Notes');
    const notesCounter = document.getElementById('notes-counter');

    if (notesTextarea && notesCounter) {
        const maxLength = 500;

        function updateCharCounter() {
            const remaining = maxLength - notesTextarea.value.length;
            notesCounter.textContent = `Opcjonalne uwagi dotyczące części (pozostało ${remaining} znaków)`;

            if (remaining < 0) {
                notesTextarea.classList.add('is-invalid');
                notesCounter.classList.add('text-red-400');
            } else {
                notesTextarea.classList.remove('is-invalid');
                notesCounter.classList.remove('text-red-400');
            }
        }

        notesTextarea.addEventListener('input', updateCharCounter);
        updateCharCounter(); // Initial call
    }

    // Auto-calculate next replacement date when last replacement date changes
    if (lastDateInput) {
        lastDateInput.addEventListener('change', function() {
            const partType = partTypeSelect?.value;
            const lastDate = new Date(this.value);

            if (partType && partType !== '' && !isNaN(lastDate)) {
                // Fetch interval and calculate next date
                fetch(`@Url.Action("GetPartDefaults", "Vehicle")?partType=${partType}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.intervalMonths) {
                            const nextDate = new Date(lastDate);
                            nextDate.setMonth(nextDate.getMonth() + data.intervalMonths);
                            nextDateInput.value = nextDate.toISOString().split('T')[0];
                        }
                    })
                    .catch(error => {
                        console.error('Error calculating next replacement date:', error);
                    });
            }
        });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl+S to save
        if (e.ctrlKey && e.key === 's') {
            e.preventDefault();
            document.querySelector('form:not(#deleteForm)').submit();
        }

        // Escape to cancel
        if (e.key === 'Escape') {
            if (confirm('Czy na pewno chcesz anulować? Niezapisane zmiany zostaną utracone.')) {
                window.location.href = '@Url.Action("VehicleDetail", "Vehicle", new { id = Model.VehicleID })';
            }
        }

        // Ctrl+Delete to delete (with extra confirmation)
        if (e.ctrlKey && e.key === 'Delete') {
            e.preventDefault();
            document.getElementById('deleteBtn')?.click();
        }
    });

    // Confirm navigation away with unsaved changes
    let formChanged = false;
    const formInputs = document.querySelectorAll('.form-input, .form-select, .form-textarea');

    // Store original values to detect changes
    const originalValues = {};
    formInputs.forEach(input => {
        originalValues[input.id || input.name] = input.value;

        input.addEventListener('change', function() {
            const currentValue = this.value;
            const originalValue = originalValues[this.id || this.name];

            formChanged = currentValue !== originalValue;
        });
    });

    window.addEventListener('beforeunload', function(e) {
        if (formChanged) {
            e.preventDefault();
            e.returnValue = '';
        }
    });

    // Mark form as submitted to prevent beforeunload
    document.querySelector('form:not(#deleteForm)').addEventListener('submit', function() {
        formChanged = false;
    });

    // Auto-hide alerts after 5 seconds
    setTimeout(() => {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.style.transition = 'opacity 0.5s ease';
            alert.style.opacity = '0';
            setTimeout(() => {
                alert.remove();
            }, 500);
        });
    }, 5000);

    // Initialize progress bar and character counter on page load
    updateProgressBar();

    // Highlight changes when editing
    formInputs.forEach(input => {
        input.addEventListener('focus', function() {
            this.style.borderColor = '#3b82f6';
        });

        input.addEventListener('blur', function() {
            const originalValue = originalValues[this.id || this.name];
            if (this.value !== originalValue) {
                this.style.borderColor = '#f59e0b'; // Highlight changed fields
            } else {
                this.style.borderColor = '#374151'; // Reset to default
            }
        });
    });

    // Add visual feedback for unsaved changes
    function updateSaveButtonState() {
        const submitBtn = document.getElementById('submitBtn');
        if (formChanged && submitBtn) {
            submitBtn.innerHTML = '<i class="fas fa-save mr-2"></i>Zapisz zmiany *';
            submitBtn.style.backgroundColor = '#f59e0b';
        }
    }

    formInputs.forEach(input => {
        input.addEventListener('input', updateSaveButtonState);
    });
</script>
}