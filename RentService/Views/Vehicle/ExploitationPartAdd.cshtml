@{
    ViewData["Title"] = "Dodaj część eksploatacyjną";
    Layout = "_Layout";
}

@model RentService.Models.VehicleModule.ExploitationPart

@section Head {
<style>
    .form-container {
        max-width: 800px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #e5e7eb;
    }

    .form-input, .form-select, .form-textarea {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: #1f2937;
        border: 1px solid #374151;
        border-radius: 0.5rem;
        color: #ffffff;
        font-size: 1rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-input:focus, .form-select:focus, .form-textarea:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-textarea {
        resize: vertical;
        min-height: 100px;
    }

    .form-error {
        color: #ef4444;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-help {
        color: #9ca3af;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .required::after {
        content: " *";
        color: #ef4444;
    }

    .form-section {
        background-color: #1f2937;
        border: 1px solid #374151;
        border-radius: 0.75rem;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .form-section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #ffffff;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #374151;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }

    .form-grid-full {
        grid-column: 1 / -1;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        padding-top: 2rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        font-size: 1rem;
    }

    .btn-primary {
        background-color: #3b82f6;
        color: #ffffff;
    }

    .btn-primary:hover {
        background-color: #2563eb;
    }

    .btn-secondary {
        background-color: #6b7280;
        color: #ffffff;
    }

    .btn-secondary:hover {
        background-color: #4b5563;
    }

    .km-input-container {
        position: relative;
    }

    .km-input-container::after {
        content: "km";
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #9ca3af;
        pointer-events: none;
    }

    .sidebar-collapsed {
        width: 4rem;
    }

    .validation-summary {
        background-color: #fef2f2;
        border: 1px solid #fecaca;
        color: #dc2626;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .validation-summary ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .validation-summary li {
        margin-bottom: 0.25rem;
    }

    .vehicle-info {
        background-color: #111827;
        border: 1px solid #374151;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .vehicle-info h3 {
        color: #ffffff;
        margin: 0 0 0.5rem 0;
        font-size: 1.125rem;
        font-weight: 600;
    }

    .vehicle-info p {
        color: #9ca3af;
        margin: 0;
        font-size: 0.875rem;
    }

    .condition-badges {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        margin-top: 0.5rem;
    }

    .condition-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .condition-new { background-color: rgba(5, 150, 105, 0.1); color: #10b981; border: 1px solid rgba(5, 150, 105, 0.2); }
    .condition-good { background-color: rgba(34, 197, 94, 0.1); color: #22c55e; border: 1px solid rgba(34, 197, 94, 0.2); }
    .condition-worn { background-color: rgba(251, 191, 36, 0.1); color: #fbbf24; border: 1px solid rgba(251, 191, 36, 0.2); }
    .condition-damaged { background-color: rgba(239, 68, 68, 0.1); color: #ef4444; border: 1px solid rgba(239, 68, 68, 0.2); }
    .condition-replaced { background-color: rgba(168, 85, 247, 0.1); color: #a855f7; border: 1px solid rgba(168, 85, 247, 0.2); }

    .alert {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .alert-success {
        background-color: rgba(5, 150, 105, 0.1);
        border: 1px solid rgba(5, 150, 105, 0.2);
        color: #10b981;
    }

    .alert-error {
        background-color: rgba(220, 38, 38, 0.1);
        border: 1px solid rgba(220, 38, 38, 0.2);
        color: #ef4444;
    }

    .readonly-field {
        background-color: #111827;
        border: 1px solid #374151;
        color: #9ca3af;
        cursor: not-allowed;
    }

    @@media (max-width: 768px) {
        .form-grid {
            grid-template-columns: 1fr;
        }
        
        .form-actions {
            justify-content: center;
        }
        
        .btn {
            min-width: 120px;
        }
    }
</style>
}

<div class="flex h-screen overflow-hidden -mx-4 -my-8">

    @await Html.PartialAsync("_Sidebar")

    <!-- Main Content -->
    <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Top Bar -->
        <header class="bg-gray-800 shadow-sm border-b border-gray-700 px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <button id="toggle-sidebar" class="text-gray-400 hover:text-white focus:outline-none">
                        <i class="fas fa-bars text-xl"></i>
                    </button>
                    <nav class="ml-4 flex items-center space-x-2 text-sm text-gray-400">
                        <a href="@Url.Action("Index", "Vehicle")" class="hover:text-white transition-colors">
                            <i class="fas fa-car mr-1"></i>
                            Pojazdy
                        </a>
                        <i class="fas fa-chevron-right text-xs"></i>
                        <a href="@Url.Action("VehicleDetail", "Vehicle", new { id = Model.VehicleID })" class="hover:text-white transition-colors">
                            @(Model.Car?.Model ?? "Pojazd")
                        </a>
                        <i class="fas fa-chevron-right text-xs"></i>
                        <span class="text-white">Dodaj część eksploatacyjną</span>
                    </nav>
                </div>
                <div class="flex items-center space-x-4">
                    <button class="text-gray-400 hover:text-white relative">
                        <i class="fas fa-bell text-xl"></i>
                        <span class="absolute -top-1 -right-1 px-1.5 py-0.5 text-xs bg-red-500 text-white rounded-full">3</span>
                    </button>
                </div>
            </div>
        </header>

        <!-- Main Content Area -->
        <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-900 p-6">
            <div class="form-container">
                
                <!-- Success/Error Messages -->
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle mr-2"></i>
                        @TempData["SuccessMessage"]
                    </div>
                }

                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-error">
                        <i class="fas fa-exclamation-circle mr-2"></i>
                        @TempData["ErrorMessage"]
                    </div>
                }

                <!-- Page Header -->
                <div class="mb-8">
                    <h1 class="text-3xl font-bold text-white mb-2">Dodaj część eksploatacyjną</h1>
                    <p class="text-gray-400">Wprowadź dane nowej części eksploatacyjnej dla pojazdu</p>
                </div>

                <!-- Vehicle Information -->
                @if (Model.Car != null)
                {
                    <div class="vehicle-info">
                        <h3>
                            <i class="fas fa-car mr-2"></i>
                            @Model.Car.Model
                        </h3>
                        <p>Numer rejestracyjny: @Model.Car.RegistrationNumber | Przebieg: @Model.Car.Mileage.ToString("N0") km</p>
                    </div>
                }

                <!-- Validation Summary -->
                @if (!ViewData.ModelState.IsValid)
                {
                    <div class="validation-summary">
                        <h4 class="font-semibold mb-2">Wystąpiły błędy walidacji:</h4>
                        <ul>
                            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                            {
                                <li>• @error.ErrorMessage</li>
                            }
                        </ul>
                    </div>
                }

                <!-- Form -->
                @using (Html.BeginForm("ExploitationPartAdd", "Vehicle", new { ExploitationPart = Model }, FormMethod.Post, true, new { @class = "space-y-6" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.VehicleID)

                    <!-- Basic Information Section -->
                    <div class="form-section">
                        <h2 class="form-section-title">
                            <i class="fas fa-info-circle mr-2"></i>
                            Podstawowe informacje
                        </h2>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                @Html.LabelFor(m => m.PartType, "Typ części", new { @class = "form-label required" })
                                @Html.DropDownListFor(m => m.PartType, new List<SelectListItem>
                                {
                                    new SelectListItem { Text = "Wybierz typ części", Value = "", Selected = true },
                                    new SelectListItem { Text = "Zawieszenie", Value = "Suspension" },
                                    new SelectListItem { Text = "Opony", Value = "Tires" },
                                    new SelectListItem { Text = "Olej", Value = "Oil" },
                                    new SelectListItem { Text = "Hamulce", Value = "Brakes" },
                                    new SelectListItem { Text = "Akumulator", Value = "Battery" },
                                    new SelectListItem { Text = "Filtry", Value = "Filters" },
                                    new SelectListItem { Text = "Paski", Value = "Belts" },
                                    new SelectListItem { Text = "Inne", Value = "Other" }
                                }, new { @class = "form-select" })
                                @Html.ValidationMessageFor(m => m.PartType, "", new { @class = "form-error" })
                                <div class="form-help">Wybierz kategorię części eksploatacyjnej</div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.PartName, "Nazwa części", new { @class = "form-label required" })
                                @Html.TextBoxFor(m => m.PartName, new { @class = "form-input", placeholder = "np. Olej silnikowy 5W-30", maxlength = "100" })
                                @Html.ValidationMessageFor(m => m.PartName, "", new { @class = "form-error" })
                                <div class="form-help">Szczegółowa nazwa części lub produktu</div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.PartCondition, "Stan części", new { @class = "form-label required" })
                                @Html.DropDownListFor(m => m.PartCondition, new List<SelectListItem>
                                {
                                    new SelectListItem { Text = "Wybierz stan", Value = "", Selected = true },
                                    new SelectListItem { Text = "Nowa", Value = "New" },
                                    new SelectListItem { Text = "Dobra", Value = "Good" },
                                    new SelectListItem { Text = "Zużyta", Value = "Worn" },
                                    new SelectListItem { Text = "Uszkodzona", Value = "Damaged" },
                                    new SelectListItem { Text = "Wymieniona", Value = "Replaced" }
                                }, new { @class = "form-select" })
                                @Html.ValidationMessageFor(m => m.PartCondition, "", new { @class = "form-error" })
                                <div class="condition-badges">
                                    <span class="condition-badge condition-new">Nowa</span>
                                    <span class="condition-badge condition-good">Dobra</span>
                                    <span class="condition-badge condition-worn">Zużyta</span>
                                    <span class="condition-badge condition-damaged">Uszkodzona</span>
                                    <span class="condition-badge condition-replaced">Wymieniona</span>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.VehicleID, "ID pojazdu", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.VehicleID, new { @class = "form-input readonly-field", @readonly = "readonly" })
                                <div class="form-help">Identyfikator pojazdu (automatycznie przypisany)</div>
                            </div>
                        </div>
                    </div>

                    <!-- Mileage Information Section -->
                    <div class="form-section">
                        <h2 class="form-section-title">
                            <i class="fas fa-tachometer-alt mr-2"></i>
                            Informacje o przebiegu
                        </h2>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                @Html.LabelFor(m => m.TotalKm, "Całkowity przebieg części", new { @class = "form-label required" })
                                <div class="km-input-container">
                                    @Html.TextBoxFor(m => m.TotalKm, new { @class = "form-input", @type = "number", min = "0", step = "1", placeholder = "0" })
                                </div>
                                @Html.ValidationMessageFor(m => m.TotalKm, "", new { @class = "form-error" })
                                <div class="form-help">Ile kilometrów część może przepracować łącznie</div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.CurrentKm, "Aktualny przebieg części", new { @class = "form-label required" })
                                <div class="km-input-container">
                                    @Html.TextBoxFor(m => m.CurrentKm, new { @class = "form-input", @type = "number", min = "0", step = "1", placeholder = "0" })
                                </div>
                                @Html.ValidationMessageFor(m => m.CurrentKm, "", new { @class = "form-error" })
                                <div class="form-help">Ile kilometrów część już przepracowała</div>
                            </div>
                        </div>
                    </div>

                    <!-- Maintenance Information Section -->
                    <div class="form-section">
                        <h2 class="form-section-title">
                            <i class="fas fa-calendar-alt mr-2"></i>
                            Informacje o konserwacji
                        </h2>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LastReplacementDate, "Data ostatniej wymiany", new { @class = "form-label required" })
                                @Html.TextBoxFor(m => m.LastReplacementDate, "{0:yyyy-MM-dd}", new { @class = "form-input", @type = "date", max = DateTime.Now.ToString("yyyy-MM-dd") })
                                @Html.ValidationMessageFor(m => m.LastReplacementDate, "", new { @class = "form-error" })
                                <div class="form-help">Kiedy część została ostatnio wymieniona</div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.NextReplacementDueDate, "Planowana data wymiany", new { @class = "form-label required" })
                                @Html.TextBoxFor(m => m.NextReplacementDueDate, "{0:yyyy-MM-dd}", new { @class = "form-input", @type = "date", min = DateTime.Now.ToString("yyyy-MM-dd") })
                                @Html.ValidationMessageFor(m => m.NextReplacementDueDate, "", new { @class = "form-error" })
                                <div class="form-help">Kiedy część powinna zostać wymieniona</div>
                            </div>

                            <div class="form-group form-grid-full">
                                @Html.LabelFor(m => m.Notes, "Uwagi", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.Notes, new { @class = "form-textarea", placeholder = "Dodatkowe informacje o części, producent, numer katalogowy...", maxlength = "500" })
                                @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "form-error" })
                                <div class="form-help">Opcjonalne uwagi dotyczące części (maksymalnie 500 znaków)</div>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="form-actions">
                        <a href="@Url.Action("VehicleDetail", "Vehicle", new { id = Model.VehicleID })" class="btn btn-secondary">
                            <i class="fas fa-times mr-2"></i>
                            Anuluj
                        </a>
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            <i class="fas fa-save mr-2"></i>
                            Dodaj część
                        </button>
                    </div>
                }

            </div>
        </main>
    </div>
</div>

@section Scripts {
<script>
    // Sidebar toggle functionality
    const sidebar = document.getElementById('sidebar');
    const toggleBtn = document.getElementById('toggle-sidebar');
    const logoText = document.getElementById('logo-text');
    const userInfo = document.getElementById('user-info');
    const navTexts = document.querySelectorAll('.nav-text');

    if (toggleBtn && sidebar) {
        toggleBtn.addEventListener('click', () => {
            sidebar.classList.toggle('sidebar-collapsed');

            if (sidebar.classList.contains('sidebar-collapsed')) {
                if (logoText) logoText.style.display = 'none';
                if (userInfo) userInfo.style.display = 'none';
                navTexts.forEach(text => text.style.display = 'none');
            } else {
                if (logoText) logoText.style.display = 'block';
                if (userInfo) userInfo.style.display = 'block';
                navTexts.forEach(text => text.style.display = 'block');
            }
        });
    }

    // Form validation
    document.querySelector('form').addEventListener('submit', function(e) {
        const requiredFields = document.querySelectorAll('input[required], select[required]');
        let isValid = true;
        
        // Clear previous errors
        document.querySelectorAll('.form-error').forEach(error => {
            if (!error.dataset.valmsg) {
                error.textContent = '';
            }
        });

        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                isValid = false;
                const errorElement = field.parentNode.querySelector('.form-error');
                if (errorElement && !errorElement.dataset.valmsg) {
                    errorElement.textContent = 'To pole jest wymagane';
                }
                field.classList.add('border-red-500');
            } else {
                field.classList.remove('border-red-500');
            }
        });

        // Validate TotalKm vs CurrentKm
        const totalKm = parseFloat(document.getElementById('TotalKm')?.value || 0);
        const currentKm = parseFloat(document.getElementById('CurrentKm')?.value || 0);
        
        if (currentKm > totalKm) {
            isValid = false;
            const errorElement = document.getElementById('CurrentKm')?.parentNode.querySelector('.form-error');
            if (errorElement && !errorElement.dataset.valmsg) {
                errorElement.textContent = 'Aktualny przebieg nie może być większy niż całkowity przebieg';
            }
            document.getElementById('CurrentKm')?.classList.add('border-red-500');
        }

        // Validate dates
        const lastDate = new Date(document.getElementById('LastReplacementDate')?.value);
        const nextDate = new Date(document.getElementById('NextReplacementDueDate')?.value);
        
        if (lastDate && nextDate && nextDate <= lastDate) {
            isValid = false;
            const errorElement = document.getElementById('NextReplacementDueDate')?.parentNode.querySelector('.form-error');
            if (errorElement && !errorElement.dataset.valmsg) {
                errorElement.textContent = 'Data planowanej wymiany musi być późniejsza niż data ostatniej wymiany';
            }
            document.getElementById('NextReplacementDueDate')?.classList.add('border-red-500');
        }

        if (!isValid) {
            e.preventDefault();
            // Scroll to first error
            const firstError = document.querySelector('.border-red-500');
            if (firstError) {
                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                firstError.focus();
            }
        } else {
            // Show loading state
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Dodawanie...';
            submitBtn.disabled = true;
        }
    });

    // Real-time validation feedback
    document.querySelectorAll('.form-input, .form-select').forEach(input => {
        input.addEventListener('blur', function() {
            if (this.hasAttribute('required') && !this.value.trim()) {
                this.classList.add('border-red-500');
            } else {
                this.classList.remove('border-red-500');
                const errorElement = this.parentNode.querySelector('.form-error');
                if (errorElement && !errorElement.dataset.valmsg) {
                    errorElement.textContent = '';
                }
            }
        });

        input.addEventListener('input', function() {
            if (this.classList.contains('border-red-500') && this.value.trim()) {
                this.classList.remove('border-red-500');
                const errorElement = this.parentNode.querySelector('.form-error');
                if (errorElement && !errorElement.dataset.valmsg) {
                    errorElement.textContent = '';
                }
            }
        });
    });

    // Character counter for notes
    const notesTextarea = document.getElementById('Notes');
    if (notesTextarea) {
        const maxLength = 500;
        const helpText = notesTextarea.parentNode.querySelector('.form-help');
        
        function updateCharCounter() {
            const remaining = maxLength - notesTextarea.value.length;
            helpText.textContent = `Opcjonalne uwagi dotyczące części (pozostało ${remaining} znaków)`;
            
            if (remaining < 0) {
                notesTextarea.classList.add('border-red-500');
                helpText.classList.add('text-red-400');
            } else {
                notesTextarea.classList.remove('border-red-500');
                helpText.classList.remove('text-red-400');
            }
        }
        
        notesTextarea.addEventListener('input', updateCharCounter);
        updateCharCounter();
    }

    // Auto-calculate next replacement date based on part type and current mileage
    const partTypeSelect = document.getElementById('PartType');
    const totalKmInput = document.getElementById('TotalKm');
    const lastDateInput = document.getElementById('LastReplacementDate');
    const nextDateInput = document.getElementById('NextReplacementDueDate');

    function calculateNextReplacement() {
        const partType = partTypeSelect?.value;
        const totalKm = parseInt(totalKmInput?.value || 0);
        const lastDate = lastDateInput?.value;

        if (partType && totalKm && lastDate) {
            // Estimated monthly mileage based on part type
            const monthlyMileageMap = {
                'Oil': 1500,        // Oil change every 15000km ≈ 10 months
                'Filters': 1200,    // Filters every 12000km ≈ 10 months  
                'Tires': 800,       // Tires every 40000km ≈ 50 months
                'Brakes': 600,      // Brakes every 30000km ≈ 50 months
                'Battery': 300,     // Battery every 3-5 years
                'Belts': 400,       // Belts every 60000km ≈ 150 months
                'Suspension': 300,  // Suspension every 80000km ≈ 270 months
                'Other': 1000       // Default
            };

            const monthlyMileage = monthlyMileageMap[partType] || 1000;
            const monthsToReplacement = Math.ceil(totalKm / monthlyMileage);
            
            const nextDate = new Date(lastDate);
            nextDate.setMonth(nextDate.getMonth() + monthsToReplacement);
            
            nextDateInput.value = nextDate.toISOString().split('T')[0];
        }
    }

    partTypeSelect?.addEventListener('change', calculateNextReplacement);
    totalKmInput?.addEventListener('input', calculateNextReplacement);
    lastDateInput?.addEventListener('change', calculateNextReplacement);

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl+S to save
        if (e.ctrlKey && e.key === 's') {
            e.preventDefault();
            document.querySelector('form').submit();
        }
        
        // Escape to cancel
        if (e.key === 'Escape') {
            if (confirm('Czy na pewno chcesz anulować? Niezapisane zmiany zostaną utracone.')) {
                window.location.href = '@Url.Action("VehicleDetail", "Vehicle", new { id = Model.VehicleID })';
            }
        }
    });

    // Confirm navigation away with unsaved changes
    let formChanged = false;
    const formInputs = document.querySelectorAll('.form-input, .form-select, .form-textarea');
    
    formInputs.forEach(input => {
        input.addEventListener('change', function() {
            formChanged = true;
        });
    });

    window.addEventListener('beforeunload', function(e) {
        if (formChanged) {
            e.preventDefault();
            e.returnValue = '';
        }
    });

    // Mark form as submitted to prevent beforeunload
    document.querySelector('form').addEventListener('submit', function() {
        formChanged = false;
    });

    // Auto-hide alerts after 5 seconds
    setTimeout(() => {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.style.transition = 'opacity 0.5s ease';
            alert.style.opacity = '0';
            setTimeout(() => {
                alert.remove();
            }, 500);
        });
    }, 5000);

    // Auto-fill part name based on part type
    partTypeSelect?.addEventListener('change', function() {
        const partNameInput = document.getElementById('PartName');
        const partType = this.value;
        
        if (partType && !partNameInput.value) {
            const defaultNames = {
                'Suspension': 'Amortyzator',
                'Tires': 'Opona',
                'Oil': 'Olej silnikowy',
                'Brakes': 'Klocki hamulcowe',
                'Battery': 'Akumulator',
                'Filters': 'Filtr',
                'Belts': 'Pasek rozrządu',
                'Other': ''
            };
            
            partNameInput.value = defaultNames[partType] || '';
        }
    });

    // Set default dates
    document.addEventListener('DOMContentLoaded', function() {
        const lastDateInput = document.getElementById('LastReplacementDate');
        const nextDateInput = document.getElementById('NextReplacementDueDate');
        
        // Set last replacement date to today if empty
        if (lastDateInput && !lastDateInput.value) {
            lastDateInput.value = new Date().toISOString().split('T')[0];
        }
        
        // Set next replacement date to 6 months from now if empty
        if (nextDateInput && !nextDateInput.value) {
            const nextDate = new Date();
            nextDate.setMonth(nextDate.getMonth() + 6);
            nextDateInput.value = nextDate.toISOString().split('T')[0];
        }
    });
</script>
}